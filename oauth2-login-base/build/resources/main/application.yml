server:
  port: 8081
spring:
  security:
    oauth2:
      client:
        registration:
          keycloak:
            clientId: oauth2-client-app                                        #서비스 공급자에 등록된 클라이언트 아이디
            clientSecret: qQ7cYPYopQBhaP7eTPbZzKnBVBcYkkNj                     #서비스 공급자에 등록된 클라이언트 비빌번호
            clientName: oauth2-client-app                                      #클라이언트 이름
            authorizationGrantType: authorization_code                         #OAuth 2.0 권한 부여 타입
            scope: openid,profile                                              #리소스에 접근 제한 범위
            clientAuthenticationMethod: client_secret_basic                    #클라이언트 자격증명 전송방식
            redirectUri: http://localhost:8081/login/oauth2/code/keycloak   #인가서버에서 권한 코드 부여 후 클라이언트로 리다이렉트 하는 위치
#            redirectUri: http://localhost:8081/login/v1/oauth2/code/keycloak   #인가서버에서 권한 코드 부여 후 클라이언트로 리다이렉트 하는 위치, 리다이렉트 커스텀
#            redirectUri: http://localhost:8081/client
            provider: keycloak

          google:
            client-id: 53950433165-0ntc7bhkskf73oball6r2popspllommj.apps.googleusercontent.com
            client-secret: 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
            scope: openid,profile,email

          naver:
            client-id: hnkdGg2kEGXFxOTI1wXY
            client-secret: 3ENfuQH8KQ
            authorization-grant-type: authorization_code
            client-name: naver-client-app
            redirect-uri: http://localhost:8081/login/oauth2/code/naver
            scope: profile,email

          kakao:
            client-id: b6daf0aae1bdaa4b978913614d2c3553
            client-secret: luBAmZ7VAoZnrLQFvUxKz6Qw8xVDYf3w
            clientAuthenticationMethod: POST
            authorization-grant-type: authorization_code
            client-name: client-app
            redirect-uri: http://localhost:8081/login/oauth2/code/kakao
#            scope: openid,profile_nickname,account_email
            scope: profile_nickname,profile_image,account_email

        provider:   ## 공급자 설정 구글은 CommonOAuth2Provider 에 설정이 되어 있다.
          keycloak:
            issuerUri: http://localhost:8080/realms/oauth2                                        #서비스 공급자 위치
            authorizationUri: http://localhost:8080/realms/oauth2/protocol/openid-connect/auth    #OAuth 2.0 권한 코드 부여 엔드 포인트
            jwkSetUri: http://localhost:8080/realms/oauth2/protocol/openid-connect/certs          #OAuth 2.0 JwkSetUri 엔드 포인트
            tokenUri: http://localhost:8080/realms/oauth2/protocol/openid-connect/token           #OAuth 2.0 토큰 엔드 포인트
            userInfoUri: http://localhost:8080/realms/oauth2/protocol/openid-connect/userinfo     #OAuth 2.0 UserInfo 엔드 포인트
            userNameAttribute: preferred_username
            #OAuth 2.0 사용자명을 추출하는 클레임명

          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

          kakao:
            # OpenID Connect 일 경우 jwkSet URI 를 가져와야 하기 때문에 필수항목
            issuerUri: https://kauth.kakao.com
            authorizationUri: https://kauth.kakao.com/oauth/authorize
            tokenUri: https://kauth.kakao.com/oauth/token
#            userInfoUri: https://kapi.kakao.com/v1/oidc/userinfo
            userInfoUri: https://kapi.kakao.com/v2/user/me
            jwkSetUri: https://kauth.kakao.com/.well-known/jwks.json
            userNameAttribute: id

            # OpenID Connect 일 경우 nameAttributeKey 가 sub 이기 때문에 별도의 커스트 마이징이 필요
            # CustomOidcUserService 참조
            # user-name-attribute: sub


  mvc:
    static-path-pattern: /static/**